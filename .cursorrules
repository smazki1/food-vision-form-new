# Food Vision AI - Project Intelligence

## Latest Development Insights (January 2, 2025)

### ✅ Hebrew Character Storage Path Resolution - Critical Success Pattern
**Breakthrough**: Successfully resolved Supabase Storage "Invalid key" errors for Hebrew characters in file paths.

**Root Cause Discovered**: Hebrew text like "עוגה" in storage paths causes failures because Supabase Storage requires ASCII-safe paths.

**Proven Solution Pattern**:
```typescript
const sanitizePathComponent = (text: string): string => {
  // 1. Hebrew word mapping for food industry terms
  const hebrewToEnglish = {
    'מנה': 'dish', 'שתיה': 'drink', 'קוקטייל': 'cocktail',
    'עוגה': 'cake', 'מאפה': 'pastry', 'סלט': 'salad',
    'עוף': 'chicken', 'בשר': 'meat', 'דג': 'fish',
    'ירקות': 'vegetables', 'פירות': 'fruits'
  };
  
  // 2. Replace whole Hebrew words first
  // 3. Convert remaining Hebrew chars to dashes
  // 4. Sanitize special characters
  // 5. Normalize dashes (collapse multiples, trim)
};
```

**Critical Storage Pattern**: Always sanitize item types in paths:
- Before: `leads/{leadId}/{hebrewItemType}/` ❌ FAILS
- After: `leads/{leadId}/{sanitizedItemType}/` ✅ WORKS

### ✅ Processed Images Complete Workflow - Production Success
**Latest Achievement**: Resolved all user-reported issues with processed images functionality.

**Issues Resolved**:
1. **Navigation Problem**: Page reloading after upload → Fixed with React Query refetch()
2. **Download Failure**: Images not downloading on click → Enhanced with direct download + fallback
3. **Upload Storage Error**: 400 errors from wrong bucket → Fixed bucket name and path structure

**Critical Storage Configuration**:
```typescript
// CORRECT - Use this bucket for all uploads:
.from('food-vision-images')

// WRONG - This causes 400 errors:
.from('food-vision-uploads')
```

**Proven Upload Pattern**:
```typescript
const filePath = `uploads/${submissionId}/${fileName}`;
const { data, error } = await supabase.storage
  .from('food-vision-images')
  .upload(filePath, file, {
    cacheControl: '3600',
    upsert: true
  });
```

**UI/UX Success Pattern**:
- Click images → Direct download (no lightbox)
- Loading states with Hebrew feedback
- File validation (25MB, image types)
- Error recovery with detailed messages

### ✅ Database Schema Verification via Supabase API
**Learning**: When database columns are missing, use Supabase Management API to verify actual schema instead of guessing.

**Proven Pattern**:
```typescript
// Use mcp_supabase_list_tables to verify column existence
// Check columns by ordinal_position and name
// Only use columns that actually exist in production database
```

**Column Existence Confirmed** (customer_submissions table):
- ✅ `branding_material_urls` (TEXT[] column 25) - EXISTS
- ✅ `reference_example_urls` (TEXT[] column 26) - EXISTS
- ✅ `description` (TEXT column 27) - EXISTS
- ❌ `internal_team_notes` - MAY NOT EXIST (migration-dependent)

**Safe Database Insert Pattern**:
```typescript
const submissionData = {
  // Always include core existing columns
  lead_id, item_type, item_name_at_submission, submission_status, original_image_urls,
  // Conditionally include verified columns
  ...(columnExists('branding_material_urls') ? { branding_material_urls } : {}),
  // Combine related fields if needed
  description: [description, specialNotes].filter(Boolean).join('\n\nהערות: ')
};
```

### ✅ Multi-File Upload Architecture Excellence
**Pattern**: Support multiple file types with unified UI but separate storage organization.

**Proven Implementation**:
1. **Separate Upload Handlers**: Each file type has its own upload logic
2. **Parallel Processing**: Use Promise.all() for simultaneous uploads
3. **Error Isolation**: Individual file failures don't break entire upload
4. **Memory Management**: Proper cleanup with URL.revokeObjectURL()
5. **Progress Feedback**: Hebrew toast messages for each stage

**Storage Organization Pattern**:
```
leads/{leadId}/{sanitizedItemType}/product/     # Product images
leads/{leadId}/{sanitizedItemType}/branding/    # Company branding  
leads/{leadId}/{sanitizedItemType}/reference/   # Reference examples
```

## Core Architecture Patterns

### Admin vs Customer Data Access Separation
**Critical Pattern**: Admin and customer users have fundamentally different data access patterns:
- **Admin users**: No client records, access all data via admin-specific hooks and RLS policies
- **Customer users**: Tied to specific client records, access data through client-filtered hooks
- **Implementation**: Create separate hook files (`useAdminSubmissions.ts` vs `useSubmissions.ts`) to handle these different access patterns
- **Database**: Use direct queries for admin, RLS policies with client filters for customers

### Database RLS (Row Level Security) Management
**Key Learning**: RLS policies can be complex and sometimes require temporary solutions:
- **Admin access**: Create temp policies like `temp_admin_access_all_submissions` for authenticated users when complex RPC functions fail
- **Simple queries**: Prefer direct table queries over complex RPC functions to avoid 400 errors
- **Separate data fetching**: Use separate queries for related data (client, lead) instead of complex joins
- **Enhanced logging**: Always add comprehensive console logging for debugging database access

### Component Conditional Logic for Multi-Role Support
**Pattern**: Components serving both admin and customer users need conditional logic:
```typescript
// Example from SubmissionViewer
const shouldUseAdminHooks = viewMode === 'admin' || viewMode === 'editor';
const submission = shouldUseAdminHooks 
  ? useAdminSubmission(submissionId) 
  : useSubmission(submissionId);
```
- **Route-based detection**: Use URL paths or view mode props to determine user context
- **Hook selection**: Conditionally choose appropriate hooks based on user role
- **Link generation**: Admin links should use `/admin/` routes, customer links use `/customer/`

## CRM Development Insights

### Always-Editable Interface Philosophy
**User Preference**: Notion-like editing experience is strongly preferred:
- **No edit mode**: Remove edit/save/cancel buttons entirely
- **Inline editing**: Click any field to edit directly with auto-save
- **Real-time feedback**: Hebrew toast messages for successful updates
- **Visual consistency**: All fields should look editable and accessible

### Smart Selector Components
**Pattern**: Business type and lead source selectors should be expandable:
- **Predefined options**: Offer common choices for quick selection
- **Free text input**: Allow custom values that get auto-saved for future use
- **Auto-value addition**: Current field values automatically added to dropdown if missing
- **Database persistence**: New values saved to respective tables for reuse

### Lead Management System Architecture
**Database Design**: Lead management requires multiple interconnected tables:
- **Core lead data**: `leads` table with restaurant, contact, status information
- **Activity tracking**: `lead_activities` table for timeline and comments
- **Cost tracking**: Fields for AI training costs, revenue, ROI calculations
- **Follow-up system**: Scheduled follow-ups with templates and automation

## Technical Implementation Patterns

### Query Key Management
**Critical**: Use consistent query key patterns for cache invalidation:
```typescript
const LEAD_QUERY_KEY = ['leads'] as const;
// Invalidate with: queryClient.invalidateQueries({ queryKey: LEAD_QUERY_KEY });
```

### Error Handling and Debugging
**Best Practice**: Always implement comprehensive logging:
- **Hook entry points**: Log function entry with parameters
- **Database queries**: Log query execution and results
- **Error states**: Log errors with context information
- **Success states**: Log successful operations with data

### Authentication State Management
**Learned Solution**: Handle token refresh gracefully:
- **Background refresh**: TOKEN_REFRESHED events should refresh quietly without UI reset
- **Cache preservation**: Avoid clearing cache during token refresh
- **Recovery mechanisms**: Implement emergency recovery for white screen issues
- **Timeout handling**: Use reasonable timeouts (5-15 seconds) to prevent infinite loops

## File Organization Insights

### Hook Organization
**Pattern**: Separate hooks by user role and functionality:
- `src/hooks/useSubmissions.ts` - Customer-specific submission hooks
- `src/hooks/useAdminSubmissions.ts` - Admin-specific submission hooks
- `src/hooks/admin/` - Directory for admin-specific functionality
- `src/hooks/__tests__/` - Keep tests alongside hooks with `.tsx` extension for JSX

### Component Structure
**Pattern**: Admin components should be self-contained:
- `src/components/admin/` - All admin-specific components
- `src/pages/admin/` - Admin page components
- `src/components/customer/` - Customer-specific components
- Clear separation prevents accidental cross-contamination

## Memory Bank Integration

### Documentation Philosophy
**Critical**: Memory bank files are essential for context preservation:
- **activeContext.md**: Current work focus and immediate next steps
- **progress.md**: Completed features with implementation details
- **systemPatterns.md**: Architecture decisions and patterns
- **Always update**: Keep memory bank current after significant changes

### Project Phases and Planning
**Pattern**: Break complex features into phases:
1. **Database schema**: Start with migrations and database structure
2. **Basic functionality**: Implement core features without UI polish
3. **UI enhancement**: Add visual polish and user experience improvements
4. **Integration**: Connect with existing systems
5. **Testing and deployment**: Comprehensive testing and production deployment

## Current System Status (2025-01-02)

### ✅ Completed Systems
- **Hebrew Submissions**: Complete path sanitization with comprehensive testing (9+ tests)
- **Processed Images Workflow**: Complete upload/download system with storage fixes
- **Branding Materials**: Full multi-file upload with database integration
- **Package Management**: Complete CRUD with comprehensive testing (22+ tests)
- **Authentication**: Stable with timeout handling and recovery
- **Admin Interface**: Full CRM with lead management and submission access
- **Upload Forms**: All three submission paths working (unified, public, legacy)
- **Database**: Optimized schema with proper RLS policies
- **Webhook Integration**: Complete Make.com integration deployed
- **Submissions Management**: Advanced filtering, bulk operations, visual thumbnails

### 🚀 Latest Production Deployment
- **URL**: https://food-vision-form-5ag87yn2x-avis-projects-a35edf10.vercel.app
- **Build Time**: 5.25s
- **Status**: ✅ LIVE AND OPERATIONAL
- **Features**: All Hebrew fixes and processed images functionality deployed

### 🎯 Next Development Areas
- **Enhanced analytics**: Dashboard improvements for business intelligence
- **Mobile responsiveness**: Ensure admin interface works on mobile
- **Performance optimization**: Code splitting for large bundles
- **Documentation**: User guides and training materials

### ⚠️ Critical Success Patterns
- **Hebrew Storage Paths**: Always use sanitizePathComponent() for item types in storage paths
- **Storage Bucket**: Use 'food-vision-images' not 'food-vision-uploads' for all uploads
- **React Query Refetch**: Use refetch() instead of window.location.reload() for data updates
- **Database Column Verification**: Verify column existence via Supabase API before using
- **Multi-File Uploads**: Test all three file types (product, branding, reference) together
- **Test coverage**: Continue expanding test suite for new features

## User Feedback Integration
**Key Learning**: User feedback drives feature priorities:
- **Hebrew Language Support**: Critical for Israeli market - always test with Hebrew characters
- **Multi-File Upload Workflows**: Users need to upload various file types per submission
- **Visual consistency**: Hebrew language support and RTL layout critical
- **Performance**: Fast response times more important than feature complexity
- **Simplicity**: Remove unnecessary steps and buttons from workflows 